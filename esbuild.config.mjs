import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import path from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const copyPlugin = {
	name: 'copy-static-files',
	setup(build) {
		build.onEnd(async () => {
			// 读取并修正 manifest.json
			const manifestPath = path.resolve('manifest.json');
			const distManifestPath = path.resolve('dist/manifest.json');
			const manifestRaw = await fs.readFile(manifestPath, 'utf-8');
			const manifest = JSON.parse(manifestRaw);
			manifest.main = "main.js";
			await fs.writeFile(distManifestPath, JSON.stringify(manifest, null, 2), 'utf-8');
			// 复制 styles.css
			try {
				await fs.copyFile('styles.css', 'dist/styles.css');
			} catch (e) {
				console.warn('styles.css not found, skip copy.');
			}
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "dist/main.js",
	minify: prod,
	plugins: [copyPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
